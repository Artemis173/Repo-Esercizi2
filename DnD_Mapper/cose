import random

# Aggiungi il codice delle classi (Equipment, Character, Monster, etc.) come nei passaggi precedenti...

def explore(characters):
    directions = ["sinistra", "destra", "sopra", "sotto"]
    dungeon_map = generate_map()  # Crea la mappa iniziale
    explored_rooms = set()  # Set per memorizzare le stanze esplorate
    room_count = 0

    # Ogni personaggio esplora per 15 stanze (o finché non vogliono fermarsi)
    while room_count < 15:
        for character in characters:
            # Ogni personaggio esplora
            print(f"\n{character.name} sta esplorando le stanze:")
            current_position = (0, 0)  # Iniziamo dalla posizione (0, 0)
            if current_position in explored_rooms:
                print(f"{character.name} è tornato in una stanza già conquistata.")
                # Sostituisci la stanza con una nuova stanza
                dungeon_map = generate_map()

            # Aggiungi la stanza alla lista di stanze esplorate
            explored_rooms.add(current_position)

            # Ottieni la stanza corrente dalla mappa
            room = dungeon_map[current_position[0]][current_position[1]]
            print(f"{character.name} è in una {room}.")

            # Gestione delle stanze speciali
            if room == "Stanza del mostro" or room == "Stanza del mostro con Re dei Goblin":
                if room == "Stanza del mostro con Re dei Goblin":
                    monster = Monster("Re dei Goblin", 20, 15, 12, 10, [Equipment("Spada lunga", 3, 1), Equipment("Armatura", 0, 4)])
                else:
                    monster = create_monster()
                print(f"Un {monster.name} appare!")
                monsters = [monster]
                if not combat([character], monsters):  # Passa solo il singolo personaggio per il combattimento
                    break

            if room == "Stanza del tesoro":
                character.add_gold(100)  # Aggiungi oro al personaggio

            if room == "Stanza di ristoro rapido":
                print(f"{character.name} è entrato nella Stanza di Ristoro Rapido!")
                character.heal_percentage(10)

            if room == "Stanza degli artefatti":
                search_artifact(character)

            # Cura opzionale per il personaggio
            if character.hp < 10:
                heal_decision = input(f"{character.name} ha {character.hp} HP. Vuoi curarti? (s/n): ").lower()
                if heal_decision == 's':
                    character.heal()

            # Stampa la posizione attuale
            print(f"\nPosizione di {character.name}: ", current_position)

            # Richiesta di direzione per il movimento
            direction = input(f"{character.name}, in quale direzione vuoi andare? (sinistra/destra/sopra/sotto): ").lower()
            if direction not in directions:
                print("Direzione non valida. Riprova.")
            else:
                current_position = move_position(current_position, direction)

            # Chiedi all'utente se vuole continuare a esplorare
            continue_exploring = input(f"{character.name}, vuoi continuare ad esplorare? (s/n): ").lower()
            if continue_exploring != 's':
                break

            room_count += 1


def start_exploration(characters):
    # Ogni personaggio esplora contemporaneamente, quindi eseguiremo la funzione esplorativa per ciascuno di loro
    for character in characters:
        explore([character])  # Ogni personaggio esplora da solo, ma la funzione è chiamata separatamente per ciascuno


# Crea personaggi
thalion = Character("Thalion", "Guerriero", 20, 16, 10, 8, [Equipment("Spada", 2, 0)], 50)
elara = Character("Elara", "Mago", 15, 8, 14, 16, [Equipment("Bastone", 1, 0)], 20)
finnian = Character("Finnian", "Ladro", 18, 14, 16, 10, [Equipment("Pugnale", 1, 0)], 30)

# Lista di personaggi
characters = [thalion, elara, finnian]

# Avvia l'esplorazione
start_exploration(characters)
